// Author: Muhammad Tayab Soomro
// Student #: 11199539
// NSID: mts066
// Email: tayab.soomro@usask.ca

// Unit tests for functions in vector.cc


#include <assert.h> // for asset()
#include <stdlib.h> // for EXIT_SUCCESS



// test_alloc_vec
//   Unit tests for alloc_vec
void test_alloc_vec(){

  int numVectors = 4; // number of vectors to test on

  // New null vectors
  Vector *v[4];

   // Initialy all vectors are NULL
   for(int i = 0; i < numVectors; i++){
     assert(v[i] == NULL);
   }

   // allocate vectors and check if they're safely allocated
   for(int i = 0; i < numVectors; i++){
     v[i] = alloc_vec();
     assert(NULL != v1);
     assert(NULL == v1->elements);
     assert(0 == v1->size);
  }


  // deallocate all vectors
  for(int i = 0; i < numVectors; i++){
    dealloc_vec(v[i]);
  }
}

// test_extend_vec
//   Unit tests for extend_vec
void test_extend_vec(){

  // Number of vectors to allocate for Testing
  int numVectors = 20;

  // Testing NULL vector
  assert(NULL == extend_vec(NULL,1.0));

  Vector *initialVector = alloc_vec();

  // Testing vector with size 1
  Vector *size1Vec = extend_vec(initialVector,1.0);
  assert(NULL != size1Vec);
  assert(1 == size1Vec->size);
  assert(1.0 == size1Vec->elements[0]);

  // Testing extend_vec with large values
  for(int i = 0; i < numVectors; i++){
    Vector *v[i] = alloc_vec();
    v[i+1] = extend_vec(v[i],i+1000);
    assert(NULL != v[i+1]);
    assert(i+1 == v[i+1]->size);
    asset(i+1000 == v[i+1]->elemnts[i]);
  }

  dealloc_vec(initialVector);
  dealloc_vec(size1Vec);
  for(int i =0; i < numVectors+1; i++){
    dealloc_vec(v[i]);
  }

  // test_print_vec
  //   Unit tests for test_print_vec
  void test_print_vec(){
    Vector *vInital = alloc_vec();
    Vector *newVector = extend_vec(vInital,1.0);
    assert(true == print_vec(newVector));
    assert(false == print_vec(NULL));
  }

}



// main:
//    Program entry point
// In:
//    argc > 0
//    argv[0 .. argc-1] != NULL
// Out:
//    return  -- EXIT_SUCCESS if program terminates successfully
//            -- EXIT_FAILURE otherwise
int main(int, char**){
  return EXIT_SUCCESS;
}
